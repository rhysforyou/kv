FORMAT: 1A
HOST: http://kvapi.extremely.online/

# Key / Value Store API

This API provides access to a basic key / value registry, where entries are broken up into buckets.

# Data Structures

## Key (object)

+ key (string, required) - name of the key
+ url (string, required) - the URL of this key resource
+ value (string, required) - the key's associated value

## Bucket (object)

+ bucket (string, required) - the name of the bucket
+ url (string, required) - the URL of this bucket resource
+ keys (array, required)
    + key (string, required) - the name of the keygen
    + url (string, required) - the URL of the key resource

## Registry (object)

+ buckets (array, required) - The buckets the registry contains
    + bucket (string, required) - the name of the bucket
    + url (string, required) - the URL of the bucket resource
+ next (string) - the URL of the next page, if one existss

# KV Store API Root [/]

This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body.

It is recommend to follow the “url” link values or Link headers to get to resources instead of constructing your own URLs to keep your client decoupled from implementation details.

## Retrieve the Entry Point [GET]

+ Response 200 (application/json)

        {
          "buckets_url": "/buckets"
        }

# Group Buckets

A bucket represents a container for storing related key / value pairs.

## Buckets Registry [/buckets{?page}]

Again, instead of constructing the URLs for the next page. It is **highly** recommended that you follow the `next` link header in the response.

+ Parameters
    + page: `1` (optional, number) ... The page of buckets to return

### List all registered buckets [GET]

+ Attributes (Registry)

+ Response 200 (application/json)

    + Headers

            Link: </buckets/?page=2>; rel="next"

    + Body

            {
                "buckets": [
                    {
                        "bucket": "shopping",
                        "url": "/buckets/shopping",
                    }
                ],
                "next": "/buckets?page=2"
            }

### Register a new bucket [POST]

You can create a new bucket using this action. It takes a JSON dictionary containing the name of the bucket to create.

- bucket: `shopping` (required, string) - The name of the bucket to create

+ Attributes (Bucket)

+ Request (application/json)

        {
            "bucket": "shopping"
        }

+ Response 201 (application/json)

        {
            "bucket": "shopping",
            "url": "/buckets/shopping",
            "keys": []
        }


## Bucket Details [/buckets/{bucket}]

A bucket is a container for an arbitraty number of key / value pairs. When
fetching a bucket resource, the API returns a JSON object containing all the
bucket's `keys`. Each of these keys has a `key` and a `url` for fetching the
key / value resource.

+ Parameters
  + bucket: `shopping` (required, string) ... ID of the bucket in the form of a URL slug

### View a bucket [GET]

+ Attributes (Bucket)

+ Response 200 (application/json)

        {
            "bucket": "shopping",
            "url": "/buckets/shopping",
            "keys": [
              {
                  "key": "eggs",
                  "url": "/buckets/shopping/eggs"
              },
              {
                  "key": "milk",
                  "url": "/buckets/shopping/milk"
              }
            ]
        }

### Delete a bucket [DELETE]

This action deletes a bucket and all the key / value pairs it contains.

+ Response 204

### Check if a bucket exists [HEAD]

+ Response 204

+ Response 404

## Keys [/buckets/{bucket}/{key}]

### Get a key [GET]

+ Attributes (Key)

+ Response 200 (application/json)

        {
            "key": "eggs",
            "value": "12"
            "url": "/buckets/shopping/eggs"
        }
